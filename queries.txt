Query One: 

  Input: NONE
  
  Return: All Origin Airports
  
  Answer: db.flightroutes.distinct("origin.airport")
  
Query Two: 

  Input: Origin Airport
  
  Return: Price Range and Distance Options
  
  Answer:  db.flightroutes.aggregate([
            {
              $match: { "origin.airport": "XXX" }  // Replace "STL" with the desired origin airport
            },
            {
              $addFields: {
                fares: [
                  {
                    $toDouble: {
                      $ifNull: [
                        { 
                          $cond: {
                            if: { 
                              $or: [
                                { $eq: [{ $trim: { input: "$averageFare" } }, ""] }, 
                                { $eq: ["$averageFare", null] }
                              ]
                            },
                            then: null,
                            else: "$averageFare"
                          }
                        },
                        null  // Default to null for invalid values
                      ]
                    }
                  },
                  {
                    $toDouble: {
                      $ifNull: [
                        { 
                          $cond: {
                            if: { 
                              $or: [
                                { $eq: [{ $trim: { input: "$lowestCarrier.fare" } }, ""] }, 
                                { $eq: ["$lowestCarrier.fare", null] }
                              ]
                            },
                            then: null,
                            else: "$lowestCarrier.fare"
                          }
                        },
                        null
                      ]
                    }
                  },
                  {
                    $toDouble: {
                      $ifNull: [
                        { 
                          $cond: {
                            if: { 
                              $or: [
                                { $eq: [{ $trim: { input: "$largestCarrier.fare" } }, ""] }, 
                                { $eq: ["$largestCarrier.fare", null] }
                              ]
                            },
                            then: null,
                            else: "$largestCarrier.fare"
                          }
                        },
                        null
                      ]
                    }
                  }
                ]
              }
            },
            {
              $unwind: "$fares"
            },
            {
              $group: {
                _id: "$origin.airport",  // Group by origin airport
                maxFare: { $max: "$fares" },
                minFare: { $min: "$fares" },
                maxMiles: { $max: { $toDouble: "$nsmiles" } },  // Ensure miles are treated as numbers
                minMiles: { $min: { $toDouble: "$nsmiles" } }
              }
            },
            {
              $addFields: {
                // Adjust miles only if maxMiles is smaller than minMiles
                maxMiles: {
                  $cond: {
                    if: { $lt: ["$maxMiles", "$minMiles"] },  // If maxMiles < minMiles
                    then: "$minMiles",  // Swap the values
                    else: "$maxMiles"
                  }
                },
                minMiles: {
                  $cond: {
                    if: { $lt: ["$maxMiles", "$minMiles"] },  // If maxMiles < minMiles
                    then: "$maxMiles",  // Swap the values
                    else: "$minMiles"
                  }
                }
              }
            },
            {
              $project: {
                _id: 0,
                originAirport: "$_id",
                priceRange: {
                  maxFare: "$maxFare",
                  minFare: "$minFare"
                },
                distanceOptions: {
                  maxMiles: "$maxMiles",  // Use adjusted maxMiles
                  minMiles: "$minMiles"   // Use adjusted minMiles
                }
              }
            }
          ])

  
Query Three: 

  Input: Origin Airport
  
  Return: All Destination Airports from Origin
  
  Answer:  db.flightroutes.aggregate([
              { 
                $match: { "origin.airport": "XXX" }  // Replace "CVG" with the origin airport you are searching for
              },
              { 
                $group: {
                  _id: null,  // We don't need to group by any specific field
                  destinations: { $addToSet: "$destination.airport" }  // Adds unique destination airports to the array
                }
              }
            ])
  
Query Four: 

  Input: Origin Airport and Destination Airport
  
  Return: For each airline that flys the route return the price, quarter and year
  
  Answer:  db.flightroutes.aggregate([
              {
                $match: {
                  "origin.airport": "CVG",  // Replace "CVG" with the desired origin airport
                  "destination.airport": "LAX"  // Replace "LAX" with the desired destination airport
                }
              },
              {
                $addFields: {
                  averagePrice: {
                    $avg: [
                      { $toDouble: { $ifNull: ["$largestCarrier.fare", 0] } },
                      { $toDouble: { $ifNull: ["$lowestCarrier.fare", 0] } }
                    ]
                  }
                }
              },
              {
                $group: {
                  _id: { year: "$year", quarter: "$quarter" },
                  avgPrice: { $avg: "$averagePrice" },
                  year: { $first: "$year" },
                  quarter: { $first: "$quarter" }
                }
              },
              {
                $project: {
                  _id: 0,
                  year: 1,
                  quarter: 1,
                  averagePrice: "$avgPrice"
                }
              }
            ])

  
Query Five: 

  Input: Origin Airport, Distance, and Price Range
  
  Return: For each quarter match the following fields and return the best match destination
  
  Answer:
  
Query Six: 

  Input: Username, Password
  
  Return: Successful or Not --> If Successful Populate User Information Fields, If not then display message(GUI END)
  
  Answer:


Query Seven: 

  Input: Origin, Destination
  
  Return: Lat/Lon coordinates of the origin and destination
  
  Answer: db.flightroutes.aggregate([
              {
                $match: {
                  "origin.airport": "XXX",         // Replace with the origin airport
                  "destination.airport": "XXX"    // Replace with the destination airport
                }
              },
              {
                $project: {
                  _id: 0,
                  origin: {
                    latitude: "$origin.latitude",
                    longitude: "$origin.longitude"
                  },
                  destination: {
                    latitude: "$destination.latitude",
                    longitude: "$destination.longitude"
                  }
                }
              },
              { 
                $limit: 1  // Only return the first matching document
              }
            ]);

