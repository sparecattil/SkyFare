Query One: 

  Input: NONE
  
  Return: All Origin Airports
  
  Answer: db.flightroutes.distinct("origin.airport")
  
Query Two: 

  Input: Origin Airport
  
  Return: Price Range and Distance Options
  
  Answer:  db.flightroutes.aggregate([
            {
              $match: { "origin.airport": "XXX" }  
            },
            {
              $addFields: {
                fares: [
                  {
                    $toDouble: {
                      $ifNull: [
                        { 
                          $cond: {
                            if: { 
                              $or: [
                                { $eq: [{ $trim: { input: "$averageFare" } }, ""] }, 
                                { $eq: ["$averageFare", null] }
                              ]
                            },
                            then: null,
                            else: "$averageFare"
                          }
                        },
                        null  
                      ]
                    }
                  },
                  {
                    $toDouble: {
                      $ifNull: [
                        { 
                          $cond: {
                            if: { 
                              $or: [
                                { $eq: [{ $trim: { input: "$lowestCarrier.fare" } }, ""] }, 
                                { $eq: ["$lowestCarrier.fare", null] }
                              ]
                            },
                            then: null,
                            else: "$lowestCarrier.fare"
                          }
                        },
                        null
                      ]
                    }
                  },
                  {
                    $toDouble: {
                      $ifNull: [
                        { 
                          $cond: {
                            if: { 
                              $or: [
                                { $eq: [{ $trim: { input: "$largestCarrier.fare" } }, ""] }, 
                                { $eq: ["$largestCarrier.fare", null] }
                              ]
                            },
                            then: null,
                            else: "$largestCarrier.fare"
                          }
                        },
                        null
                      ]
                    }
                  }
                ]
              }
            },
            {
              $unwind: "$fares"
            },
            {
              $group: {
                _id: "$origin.airport",  
                maxFare: { $max: "$fares" },
                minFare: { $min: "$fares" },
                maxMiles: { $max: { $toDouble: "$nsmiles" } },  
                minMiles: { $min: { $toDouble: "$nsmiles" } }
              }
            },
            {
              $addFields: {
                
                maxMiles: {
                  $cond: {
                    if: { $lt: ["$maxMiles", "$minMiles"] },  
                    then: "$minMiles", 
                    else: "$maxMiles"
                  }
                },
                minMiles: {
                  $cond: {
                    if: { $lt: ["$maxMiles", "$minMiles"] },  
                    then: "$maxMiles", 
                    else: "$minMiles"
                  }
                }
              }
            },
            {
              $project: {
                _id: 0,
                originAirport: "$_id",
                priceRange: {
                  maxFare: "$maxFare",
                  minFare: "$minFare"
                },
                distanceOptions: {
                  maxMiles: "$maxMiles",  
                  minMiles: "$minMiles"  
                }
              }
            }
          ])

  
Query Three: 

  Input: Origin Airport
  
  Return: All Destination Airports from Origin
  
  Answer:  db.flightroutes.aggregate([
              { 
                $match: { "origin.airport": "XXX" }  
              },
              { 
                $group: {
                  _id: null,  
                  destinations: { $addToSet: "$destination.airport" }  
                }
              }
            ])
  
Query Four: 

  Input: Origin Airport and Destination Airport (Full-Text Search Format)
  
  Return: For each airline that flys the route return the price, quarter and year
  
  Answer:  db.flightroutes.aggregate([
          {
            $match: {
              $text: { $search: "CVG LAX" }  
            }
          },
          {
            $addFields: {
              averagePrice: {
                $avg: [
                  { 
                    $convert: { 
                      input: "$largestCarrier.fare", 
                      to: "double", 
                      onError: 'null', 
                      onNull: 'null' 
                    } 
                  },
                  { 
                    $convert: { 
                      input: "$lowestCarrier.fare", 
                      to: "double", 
                      onError: 'null', 
                      onNull: 'null' 
                    } 
                  }
                ]
              }
            }
          },
          {
            $group: {
              _id: { airline: "$largestCarrier.name", year: "$year", quarter: "$quarter" },  
              avgPrice: { $avg: "$averagePrice" }
            }
          },
          {
            $group: {
              _id: { airline: "$_id.airline", quarter: "$_id.quarter" },  
              years: {
                $push: {
                  year: "$_id.year",
                  avgPrice: "$avgPrice"
                }
              }
            }
          },
          {
            $project: {
              airline: "$_id.airline",
              quarter: "$_id.quarter",
              years: 1
            }
          },
          {
            $sort: { "quarter": 1, "airline": 1 }  
          }
        ]);
  
Query Five: 

  Input: None
  
  Return: For each quarter match the following fields and return the best match destination
  
  Answer: db.accounts.aggregate([
          {
            $match: {
              username: "XXX"  
            }
          },
          {
            $project: {
              originAirport: 1, 
              miles: 1,         
              price: 1          
            }
          },
          
          {
            $lookup: {
              from: "flightroutes", 
              let: { 
                originAirportInput: "$originAirport",
                maxDistance: { $toDouble: "$miles" },  
                inputPrice: { $toDouble: "$price" }    
              },
              pipeline: [
                
                {
                  $match: {
                    $expr: { $eq: ["$origin.airport", "$$originAirportInput"] }
                  }
                },
                
                {
                  $addFields: {
                    distanceDeviation: { 
                      $abs: { 
                        $subtract: [
                          { 
                            $toDouble: { 
                              $cond: {
                                if: { 
                                  $or: [
                                    { $eq: [ "$nsmiles", "" ] }, 
                                    { $eq: [ "$nsmiles", null ] }
                                  ]
                                }, 
                                then: 0, 
                                else: "$nsmiles"
                              }
                            }
                          },
                          "$$maxDistance"  
                        ] 
                      }
                    },
                    priceDeviation: { 
                      $abs: { 
                        $subtract: [
                          { 
                            $toDouble: { 
                              $cond: {
                                if: { 
                                  $or: [
                                    { $eq: [ "$lowestCarrier.fare", "" ] },
                                    { $eq: [ "$lowestCarrier.fare", null ] }
                                  ]
                                },
                                then: 0, 
                                else: "$lowestCarrier.fare"
                              }
                            }
                          },
                          "$$inputPrice"  
                        ] 
                      }
                    }
                  }
                },
                
                {
                  $sort: {
                    distanceDeviation: 1,
                    priceDeviation: 1
                  }
                },
                
                {
                  $group: {
                    _id: "$quarter",
                    bestFlight: { $first: "$$ROOT" }
                  }
                },
                
                {
                  $project: {
                    _id: 0,
                    quarter: "$_id",
                    origin: "$bestFlight.origin.airport",
                    destination: "$bestFlight.destination.airport",
                    price: "$bestFlight.lowestCarrier.fare",
                    miles: "$bestFlight.nsmiles",
                    airline: "$bestFlight.lowestCarrier.name"  
                  }
                }
              ],
              as: "flightRoutes" 
            }
          },
          
          {
            $project: {
              username: 1,
              originAirport: 1,
              flightRoutes: 1 
            }
          },
          
          {
            $unwind: {
              path: "$flightRoutes",
              preserveNullAndEmptyArrays: true  
            }
          },
          
          {
            $group: {
              _id: "$flightRoutes.quarter",
              quarterData: { $first: "$flightRoutes" }
            }
          },
          
          {
            $project: {
              quarter: "$_id",
              origin: { $ifNull: ["$quarterData.origin", null] },
              destination: { $ifNull: ["$quarterData.destination", null] },
              price: { $ifNull: ["$quarterData.price", null] },
              miles: { $ifNull: ["$quarterData.miles", null] },
              airline: { $ifNull: ["$quarterData.airline", null] }
            }
          },
          
          {
            $sort: {
              quarter: 1
            }
          }
        ]);



  
Query Six: 

  Input: Username, Password
  
  Return: Successful or Not --> If Successful Populate User Information Fields, If not then display message(GUI END)
  
  Answer:


Query Seven: 

  Input: Origin, Destination
  
  Return: Lat/Lon coordinates of the origin and destination
  
  Answer: db.flightroutes.aggregate([
              {
                $match: {
                  "origin.airport": "XXX",         
                  "destination.airport": "XXX"    
                }
              },
              {
                $project: {
                  _id: 0,
                  origin: {
                    latitude: "$origin.latitude",
                    longitude: "$origin.longitude"
                  },
                  destination: {
                    latitude: "$destination.latitude",
                    longitude: "$destination.longitude"
                  }
                }
              },
              { 
                $limit: 1  
              }
            ]);

